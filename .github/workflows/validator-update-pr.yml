# The can be run manually via the github website if needed.
# Normally the go-tableland repo will run an action that triggers
# this to run when there is a release of the Validator.
name: Validator Update PR
on:
  workflow_dispatch:
    inputs:
      validator_version:
        description: "Validator version"
        required: true

jobs:
  validator-update-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v3

      - name: Cache üì¶
        uses: actions/cache@v3
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Setup Node Environment ‚¨¢
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Update validatorVersion in package.json
        id: validator-version-bump
        uses: jaywcjlove/github-action-package@v1.3.0
        with:
          data: |
            {
              "validatorVersion": "${{ github.event.inputs.validator_version }}"
            }

      - run: echo "validator version - ${{ steps.info.outputs.version }} - ${{ github.event.inputs.validator_version }}"

      - name: Install üîß
        run: npm install

      - name: Build üõ†
        run: npm run build

      - uses: actions/github-script@v6
        id: create-validator-update-pr
        name: Create Validator Update PR
        with:
          # NOTE: The automatic release workflow uses ${{secrets.TEXTILEIO_MACHINE_ACCESS_TOKEN}}
          #       so that workflows can be triggered across repos.
          github-token: ${{secrets.RELEASE_TOKEN}}
          script: |
            try {
              const version = '${{ github.event.inputs.validator_version }}';
              const branchName = 'validator-update-pr-' + version;
              const prBody = '‚úÖ This PR was created by the Validator Update PR action for version ' + version;

              const baseBranchName = 'main';
              const baseBranch = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: baseBranchName
              });

              // Create a branch with the new release
              const branchRef = await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/heads/' + branchName,
                sha: baseBranch.data.commit.sha
              });

              console.log("branchRef", branchRef);

              // commit changes
              await github.rest.git.createCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                message: 'Add Validator Update PR binaries for ' + version,
                tree: branchRef.data.object.sha
              });

              // Create a pull request
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Validator Update PR ' + version,
                head: branchName,
                base: baseBranchName,
                body: prBody
              });
            } catch (err) {
              console.log(err);
              core.setFailed('Failed to create release branch: ' + err.message);
              return;
            }
